{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf480
{\fonttbl\f0\fswiss\fcharset77 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f0\fs24 \cf0 <html>\
<head>\
<title>Epicus Online</title>\
<script type = "text/javascript">\
	// Initiate constant important vars.\
	var gameState = 0;\
	// initiate constant grid vars.\
	var roomSprite$;\
	var roomSpriteX;\
	var roomSpriteY;\
	var newRoom;\
	var gridSize;\
	var northRoom;\
	var southRoom;\
	var westRoom;\
	var eastRoom;\
	// Initiate constant player vars.\
	var playerSprite$;\
	var playerSpriteX;\
	var playerSpriteY;\
	var playerGridX;\
	var playerGridY;\
	var playerDirection$;\
	// Initiate constant npc1 vars.\
	var npc1Sprite$;\
	var npc1SpriteX;\
	var npc1SpriteY;\
	var npc1GridX;\
	var npc1GridY;\
	var npc1Direction$;\
	// Initiate constant enemy vars.\
	var enemySprite$;\
	var enemySpriteX;\
	var enemySpriteY;\
	var enemyGridX;\
	var enemyGridY;\
	var enemyDirection$;\
	\
	\
	\
	function Random (maxValue) \{\
		randomNumber = maxValue * Math.random();\
		randomNumber = Math.ceil (randomNumber);\
		return randomNumber;\
	\}\
	\
	\
	\
	function StartGame () \{\
		gameState = 1;\
		\
		// Set grid vars.\
		roomSprite$ = "http://209.85.48.12/11610/159/upload/p4560898.gif";\
		roomSpriteX = 5\
		roomSpriteY = 5\
		newRoom = 1;\
		\
		// Set player vars.\
		playerSprite$ = "http://209.85.48.12/11610/159/upload/p4560934.gif";\
		playerGridX = 3;\
		playerGridY = 10;\
		playerDirection$ = "Down";\
		// Determine the player's sprite coordinates based on its grid coordinates.\
		playerSpriteX = playerGridX * 43;\
		playerSpriteX = playerSpriteX - 38;\
		playerSpriteY = playerGridY * 43;\
		playerSpriteY = playerSpriteY - 38;\
		\
		// Set enemy vars.\
		enemySprite$ = "http://209.85.48.12/11610/159/upload/p4557408.gif";\
		enemyGridX = 9;\
		enemyGridY = 4;\
		enemyDirection$ = "Down";\
		// Determine the enemy's sprite coordinates based on its grid coordinates.\
		enemySpriteX = enemyGridX * 43\
		enemySpriteX = enemySpriteX - 38\
		enemySpriteY = enemyGridY * 43\
		enemySpriteY = enemySpriteY - 38\
\
		// Draw sprites.\
		element = document.getElementById ("Image_roomSprite");\
		element.src = roomSprite$;\
		element = document.getElementById ("Span_roomSprite");\
		element.style.left = roomSpriteX;\
		element.style.top = roomSpriteY;\
			\
		element = document.getElementById ("Image_playerSprite");\
		element.src = playerSprite$;\
		element = document.getElementById ("Span_playerSprite");\
		element.style.left = playerSpriteX;\
		element.style.top = playerSpriteY;\
		\
		/*\
		element = document.getElementById ("Image_enemySprite");\
		element.src = enemySprite$;\
		element = document.getElementById ("Span_enemySprite");\
		element.style.left = enemySpriteX;\
		element.style.top = enemySpriteY;\
		*/\
	\}\
	\
	\
	\
	function LoadRoom (newRoom) \{\
		switch (newRoom) \{\
		case 1:\
			roomSprite$ = "http://209.85.48.12/11610/159/upload/p4560898.gif"\
			gridSize = 14\
			gridMap$ = new Array (gridSize);\
			gridMap$  [1] = " 00000010000000";\
			gridMap$  [2] = " 10000000000000";\
			gridMap$  [3] = " 00000011111001";\
			gridMap$  [4] = " 00010010001100";\
			gridMap$  [5] = " 10000010000100";\
			gridMap$  [6] = " 00000011090100";\
			gridMap$  [7] = " 00010001121100";\
			gridMap$  [8] = " 01000000090000";\
			gridMap$  [9] = " 00001000000000";\
			gridMap$ [10] = " 10000000000010";\
			gridMap$ [11] = " 00000000100000";\
			gridMap$ [12] = " 01001000001000";\
			gridMap$ [13] = " 00100001000001";\
			gridMap$ [14] = " 10000100000100";\
\
			northRoom = 0;\
			southRoom = 0;\
			westRoom = 0;\
			eastRoom = 2;\
			\
			portal1Room = 0;\
			portal1gridX = 1;\
			portal1gridY = 1;\
			\
			// Set npc1 vars.\
			npc1Sprite$ = "http://209.85.48.12/11610/159/upload/p4557156.gif";\
			npc1GridX = 5;\
			npc1GridY = 4;\
			npc1Direction$ = "Down";\
			break;\
		case 2:\
			roomSprite$ = "http://209.85.48.12/11610/159/upload/p4560899.gif"\
			gridSize = 14\
			gridMap$ = new Array (gridSize);\
			gridMap$  [1] = " 00000100000010";\
			gridMap$  [2] = " 00000000010010";\
			gridMap$  [3] = " 10000000100000";\
			gridMap$  [4] = " 00010000000100";\
			gridMap$  [5] = " 00000011111001";\
			gridMap$  [6] = " 00000010001000";\
			gridMap$  [7] = " 00000010901010";\
			gridMap$  [8] = " 01001111211000";\
			gridMap$  [9] = " 00001000901000";\
			gridMap$ [10] = " 00092900001000";\
			gridMap$ [11] = " 00001000001100";\
			gridMap$ [12] = " 00101111911000";\
			gridMap$ [13] = " 10000010000001";\
			gridMap$ [14] = " 00000001010000";\
			\
			northRoom = 0;\
			southRoom = 0;\
			westRoom = 1;\
			eastRoom = 0;\
			\
			portal1Room = 0;\
			portal1gridX = 1;\
			portal1gridY = 1;\
			\
			// Set npc1 vars.\
			npc1Sprite$ = "http://209.85.48.12/11610/159/upload/p4557156.gif";\
			npc1GridX = 10;\
			npc1GridY = 10;\
			npc1Direction$ = "Down";\
			break;\
		\}\
		element = document.getElementById ("Image_roomSprite");\
		element.src = roomSprite$;\
		\
		// Determine the NPC's sprite coordinates based on its grid coordinates.\
		npc1SpriteX = npc1GridX * 43;\
		npc1SpriteX = npc1SpriteX - 38;\
		npc1SpriteY = npc1GridY * 43;\
		npc1SpriteY = npc1SpriteY - 38;\
		\
		element = document.getElementById ("Image_npc1Sprite");\
		element.src = npc1Sprite$;\
		element = document.getElementById ("Span_npc1Sprite");\
		element.style.left = npc1SpriteX;\
		element.style.top = npc1SpriteY;\
	\}\
	\
	\
	\
	function HandleKeydown (ev) \{\
		// Figure out which keyboard key was typed and store it in the "key" variable.\
		df = document.forms [0];\
		key = ( (ev.which) || (ev.keyCode) );\
		\
		// ------------------------\
		//     Player Routine...\
		// ------------------------\
	\
		// Reset the new tile's location to the current tile's.\
		playerNewGridX = playerGridX;\
		playerNewGridY = playerGridY;\
				\
		// Check which direction the player is trying to move in.\
		switch (key) \{\
		case 38: // Up Arrow was pressed.\
			playerDirection$ = "Up";\
			playerNewGridY = playerGridY - 1;\
			break;\
		case 40: // Down Arrow was pressed.\
			playerDirection$ = "Down";\
			playerNewGridY = playerGridY + 1;\
			break;\
		case 37: // Left Arrow was pressed.\
			playerDirection$ = "Left";\
			playerNewGridX = playerGridX - 1;\
			break;	\
		case 39: // Right Arrow was pressed.\
			playerDirection$ = "Right";\
			playerNewGridX = playerGridX + 1;\
			break;\
		\}\
		// Check what kind of tile the player is trying to move onto.\
		gridMapRowX$ = gridMap$ [playerNewGridY];\
		playerTile$ = gridMapRowX$.charAt (playerNewGridX);\
		if (playerTile$ == "0") \{playerTile$ = "Empty"\}\
		if (playerTile$ == "1") \{playerTile$ = "Wall"\}\
		if (playerTile$ == "2") \{playerTile$ = "Door"\}\
		if (playerTile$ == "9") \{playerTile$ = "Empty"\}\
\
		// Check if the player is entering another room.\
		if (playerNewGridY < 1) \{\
			playerTile$ = "Wall";\
			if (northRoom > 0) \{\
				playerGridY = gridSize;\
				LoadRoom (northRoom);\
			\}\
		\}\
		if (playerNewGridY > gridSize) \{\
			playerTile$ = "Wall";\
			if (southRoom > 0) \{\
				playerGridY = 1;\
				LoadRoom (southRoom);\
			\}\
		\}\
		if (playerNewGridX < 1) \{\
			playerTile$ = "Wall";\
			if (westRoom > 0) \{\
				playerGridX = gridSize;\
				LoadRoom (westRoom);\
			\}\
		\}\
		if (playerNewGridX > gridSize) \{\
			playerTile$ = "Wall";\
			if (eastRoom > 0) \{\
				playerGridX = 1;\
				LoadRoom (eastRoom);\
			\}\
		\}\
		// This ensures that the player can't move onto the same tile as an NPC.\
		if (playerNewGridX == npc1GridX && playerNewGridY == npc1GridY) \{playerTile$ = "Wall"\}\
		\
		// Perform the new tile's behaviour.\
		if (playerTile$ == "Door") \{\
			if (playerDirection$ == "Up") \{playerNewGridY = playerNewGridY - 1\}\
			if (playerDirection$ == "Down") \{playerNewGridY = playerNewGridY + 1\}\
			if (playerDirection$ == "Left") \{playerNewGridX = playerNewGridX - 1\}\
			if (playerDirection$ == "Right") \{playerNewGridX = playerNewGridX + 1\}\
			playerTile$ = "Empty";\
		\}\
		if (playerTile$ == "Signpost") \{\
			alert (signpostText$);\
			playerTile$ = "Wall";\
		\}\
		if (playerTile$ == "Empty") \{\
			playerGridX = playerNewGridX;\
			playerGridY = playerNewGridY;\
		\}\
		if (playerTile$ == "Wall") \{\
			playerNewGridX = playerGridX;\
			playerNewGridY = playerGridY;\
		\}\
		\
		// Determine the player's sprite coordinates based on its grid coordinates.\
		playerSpriteX = playerGridX * 43;\
		playerSpriteX = playerSpriteX - 38;\
		playerSpriteY = playerGridY * 43;\
		playerSpriteY = playerSpriteY - 38;\
			\
		// Reposition the player sprite.\
		if (key >= 37 && key <= 40) \{\
			element = document.getElementById ("Span_playerSprite");\
			element.style.left = playerSpriteX;\
			element.style.top = playerSpriteY;\
		\}\
		\
		// ------------------------\
		//      NPC 1 Routine...\
		// ------------------------\
\
		// Reset the new tile's location to the current tile's.\
		npc1NewGridX = npc1GridX;\
		npc1NewGridY = npc1GridY;\
\
		/*\
		// Simple NPC AI.\
		npc1Action = Random(4);\
		if (npc1Action == 1) \{npc1Action$ = "Move Up"\}\
		if (npc1Action == 2) \{npc1Action$ = "Move Down"\}\
		if (npc1Action == 3) \{npc1Action$ = "Move Left"\}\
		if (npc1Action == 4) \{npc1Action$ = "Move Right"\}\
		// Check which direction the NPC is attempting to move in.\
		if (npc1Action$ == "Move Up") \{npc1NewGridY = npc1GridY - 1\}\
		if (npc1Action$ == "Move Down") \{npc1NewGridY = npc1GridY + 1\}\
		if (npc1Action$ == "Move Left") \{npc1NewGridX = npc1GridX - 1\}\
		if (npc1Action$ == "Move Right") \{npc1NewGridX = npc1GridX + 1\}\
		*/	\
		\
		// Advanced NPC AI.\
		checkDirection = 1;\
		npc1Paths$ = " ";\
		npc1ActionChoices = 0;\
		for (i = 0; i >= 0; i++) \{\
			walkingOffGrid = 0;\
			if (checkDirection == 1) \{pathCheck$ = "U"\}\
			if (checkDirection == 2) \{pathCheck$ = "D"\}\
			if (checkDirection == 3) \{pathCheck$ = "L"\}\
			if (checkDirection == 4) \{pathCheck$ = "R"\}\
			if (checkDirection == 1) \{npc1NewGridY = npc1GridY - 1\}\
			if (checkDirection == 2) \{npc1NewGridY = npc1GridY + 1\}\
			if (checkDirection == 3) \{npc1NewGridX = npc1GridX - 1\}\
			if (checkDirection == 4) \{npc1NewGridX = npc1GridX + 1\}\
			// This prevents the NPC from walking out of the room.\
			if (npc1NewGridX < 1) \{walkingOffGrid = 1\}\
			if (npc1NewGridX > gridSize) \{walkingOffGrid = 1\}\
			if (npc1NewGridY < 1) \{walkingOffGrid = 1\}\
			if (npc1NewGridY > gridSize) \{walkingOffGrid = 1\}\
			if (walkingOffGrid == 0) \{\
				gridMapRowX$ = gridMap$ [npc1NewGridY];\
				npc1Tile$ = gridMapRowX$.charAt (npc1NewGridX);\
				if (npc1Tile$ == "0") \{\
					npc1Paths$ = npc1Paths$ + pathCheck$;\
					npc1ActionChoices = npc1ActionChoices + 1;\
				\}\
			\}\
			npc1NewGridX = npc1GridX;\
			npc1NewGridY = npc1GridY;\
			checkDirection = checkDirection + 1;\
			if (checkDirection == 5) \{break\}\
		\}\
		npc1Action = Random (npc1ActionChoices);\
		npc1Action$ = npc1Paths$.charAt (npc1Action);\
		if (npc1Action$ == "U") \{npc1Action$ = "Move Up"\};\
		if (npc1Action$ == "D") \{npc1Action$ = "Move Down"\};\
		if (npc1Action$ == "L") \{npc1Action$ = "Move Left"\};\
		if (npc1Action$ == "R") \{npc1Action$ = "Move Right"\};\
		// Check which direction the NPC is attempting to move in.\
		if (npc1Action$ == "Move Up") \{npc1NewGridY = npc1GridY - 1\}\
		if (npc1Action$ == "Move Down") \{npc1NewGridY = npc1GridY + 1\}\
		if (npc1Action$ == "Move Left") \{npc1NewGridX = npc1GridX - 1\}\
		if (npc1Action$ == "Move Right") \{npc1NewGridX = npc1GridX + 1\}\
		\
		\
		// Check what kind of tile the NPC is trying to move onto.\
		gridMapRowX$ = gridMap$ [npc1NewGridY];\
		npc1Tile$ = gridMapRowX$.charAt (npc1NewGridX);\
		if (npc1Tile$ == "0") \{npc1Tile$ = "Empty"\}\
		if (npc1Tile$ == "9") \{npc1Tile$ = "Empty"\}\
		if (npc1Tile$ != "Empty") \{npc1Tile$ = "Wall"\}\
		// This prevents the NPC from walking out of the room.\
		if (npc1NewGridX < 1) \{npc1Tile$ = "Wall"\}\
		if (npc1NewGridX > gridSize) \{npc1Tile$ = "Wall"\}\
		if (npc1NewGridY < 1) \{npc1Tile$ = "Wall"\}\
		if (npc1NewGridY > gridSize) \{npc1Tile$ = "Wall"\}\
		// This ensures that the NPC can't move onto the same tile as the player.\
		if (npc1NewGridX == playerGridX && npc1NewGridY == playerGridY) \{npc1Tile$ = "Wall"\}\
		\
		// Perform the new tile's behaviour.\
		if (npc1Tile$ == "Empty") \{\
			npc1GridX = npc1NewGridX;\
			npc1GridY = npc1NewGridY;\
		\}\
		if (npc1Tile$ == "Wall") \{\
			npc1NewGridX = npc1GridX;\
			npc1NewGridY = npc1GridY;\
		\}\
		\
		// Determine the NPC's sprite coordinates based on its grid coordinates.\
		npc1SpriteX = npc1GridX * 43;\
		npc1SpriteX = npc1SpriteX - 38;\
		npc1SpriteY = npc1GridY * 43;\
		npc1SpriteY = npc1SpriteY - 38;\
		// Draw the NPC sprite.\
		element = document.getElementById ("Span_npc1Sprite");\
		element.style.left = npc1SpriteX;\
		element.style.top = npc1SpriteY;\
	\}\
	\
	\
	\
</script>\
</head>\
<body onkeydown = "HandleKeydown (event)" >\
<span id = "Span_roomSprite" style = "visibility:visible; position:absolute; z-index:1;"> <img id = "Image_roomSprite"/> </span>\
<span id = "Span_playerSprite" style = "visibility:visible; position:absolute; z-index:4;"> <img id = "Image_playerSprite"/> </span>\
<span id = "Span_npc1Sprite" style = "visibility:visible; position:absolute; z-index:3;"> <img id = "Image_npc1Sprite"/> </span>\
<span id = "Span_enemySprite" style = "visibility:visible; position:absolute; z-index:2;"> <img id = "Image_enemySprite"/> </span>\
\
<script type = "text/javascript">\
	if (gameState == 0) \{ StartGame () \}\
	LoadRoom (newRoom);\
</script>\
\
</body>\
</html>}